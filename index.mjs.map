{"version":3,"file":"index.mjs","sources":["../lib/smediansorted.js","../lib/ndarray.js","../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number-float64-base-to-float32';\nimport floor from '@stdlib/math-base-special-floor';\n\n\n// MAIN //\n\n/**\n* Computes the median value of a sorted single-precision floating-point strided array.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - sorted input array\n* @param {integer} stride - stride length\n* @returns {number} median value\n*\n* @example\n* import Float32Array from '@stdlib/array-float32';\n*\n* var x = new Float32Array( [ 1.0, 2.0, 3.0 ] );\n*\n* var v = smediansorted( x.length, x, 1 );\n* // returns 2.0\n*/\nfunction smediansorted( N, x, stride ) {\n\tvar offset;\n\tvar n;\n\tvar m;\n\n\tif ( N <= 0 ) {\n\t\treturn NaN;\n\t}\n\tif ( stride < 0 ) {\n\t\toffset = (1-N) * stride;\n\t} else {\n\t\toffset = 0;\n\t}\n\tn = N / 2;\n\tm = floor( n );\n\tif ( n === m ) {\n\t\t// Even number of elements...\n\t\treturn float64ToFloat32( float64ToFloat32( x[ offset+(m*stride) ] + x[ offset+((m-1)*stride) ] ) / 2.0 ); // eslint-disable-line max-len\n\t}\n\t// Odd number of elements...\n\treturn x[ offset+(m*stride) ];\n}\n\n\n// EXPORTS //\n\nexport default smediansorted;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number-float64-base-to-float32';\nimport floor from '@stdlib/math-base-special-floor';\n\n\n// MAIN //\n\n/**\n* Computes the median value of a sorted single-precision floating-point strided array.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - sorted input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} median value\n*\n* @example\n* import Float32Array from '@stdlib/array-float32';\n* import floor from '@stdlib/math-base-special-floor';\n*\n* var x = new Float32Array( [ 2.0, -3.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var N = floor( x.length / 2 );\n*\n* var v = smediansorted( N, x, 2, 1 );\n* // returns 0.0\n*/\nfunction smediansorted( N, x, stride, offset ) {\n\tvar n;\n\tvar m;\n\n\tif ( N <= 0 ) {\n\t\treturn NaN;\n\t}\n\tn = N / 2;\n\tm = floor( n );\n\tif ( n === m ) {\n\t\t// Even number of elements...\n\t\treturn float64ToFloat32( float64ToFloat32( x[ offset+(m*stride) ] + x[ offset+((m-1)*stride) ] ) / 2.0 ); // eslint-disable-line max-len\n\t}\n\t// Odd number of elements...\n\treturn x[ offset+(m*stride) ];\n}\n\n\n// EXPORTS //\n\nexport default smediansorted;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport smediansorted from './smediansorted.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( smediansorted, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default smediansorted;\n"],"names":["smediansorted","N","x","stride","offset","n","m","NaN","floor","float64ToFloat32","setReadOnly","ndarray"],"mappings":";;mUA4CA,SAASA,EAAeC,EAAGC,EAAGC,GAC7B,IAAIC,EACAC,EACAC,EAEJ,OAAKL,GAAK,EACFM,KAGPH,EADID,EAAS,GACH,EAAEF,GAAKE,EAER,GAEVE,EAAIJ,EAAI,MACRK,EAAIE,EAAOH,IAGHI,EAAkBA,EAAkBP,EAAGE,EAAQE,EAAEH,GAAYD,EAAGE,GAASE,EAAE,GAAGH,IAAc,GAG7FD,EAAGE,EAAQE,EAAEH,GACrB,CClBA,SAASH,EAAeC,EAAGC,EAAGC,EAAQC,GACrC,IAAIC,EACAC,EAEJ,OAAKL,GAAK,EACFM,KAERF,EAAIJ,EAAI,MACRK,EAAIE,EAAOH,IAGHI,EAAkBA,EAAkBP,EAAGE,EAAQE,EAAEH,GAAYD,EAAGE,GAASE,EAAE,GAAGH,IAAc,GAG7FD,EAAGE,EAAQE,EAAEH,EACrB,CCjCAO,EAAAV,EAAA,UAAAW"}